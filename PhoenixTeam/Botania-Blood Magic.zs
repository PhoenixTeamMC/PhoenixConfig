##For clarification, NOT DONE. This currently only accounts for the first tier of both BTN and BM.
##Blood Magic
val bloodRune = <AWWayofTime:AlchemicalWizardrybloodRune>;
val crucibleFire = <AWWayofTime:AlchemicalWizardrytile.blockSpellEffect>;
val unstableSpellEmpowerer = <AWWayofTime:AlchemicalWizardrytile.blockSpellEnhancement>;
val defaultSpellModifier = <AWWayofTime:AlchemicalWizardrytile.blockSpellModifier>;
val particleGenerator = <AWWayofTime:AlchemicalWizardrytile.blockSpellParadigm>;
val bloodAltar = <AWWayofTime:Altar>;
val weakActivationCrystal = <AWWayofTime:activationCrystal>;
val aether = <AWWayofTime:aether>;
val airScribeTool =  <AWWayofTime:airScribeTool>;
val airSigil = <AWWayofTime:airSigil>;
val potionFlask = <AWWayofTime:alchemyFlask>;
val apprenticeBloodOrb = <AWWayofTime:apprenticeBloodOrb>;
val aquasalus = <AWWayofTime:aquasalus>;
val archmageBloodOrb = <AWWayofTime:archmageBloodOrb>;
val armourForge = <AWWayofTime:armourForge>;
val armourInhibitor = <AWWayofTime:armourInhibitor>;
val averageLengtheningCatalyst = <AWWayofTime:averageLengtheningCatalyst>;
val averagePowerCatalyst = <AWWayofTime:averagePowerCatalyst>;
val blankSlate = <AWWayofTime:blankSlate>;
val unboundSpellCrystal = <AWWayofTime:blankSpell>;
val blockSpellConduit = <AWWayofTime:blockConduit>;
val spellTable = <AWWayofTime:blockHomHeart>;
val arcanePedestal = <AWWayofTime:blockPedestal>;
val arcanePlinth = <AWWayofTime:blockPlinth>;
val schematicSaver = <AWWayofTime:blockSchemSaver>;
val teleposer = <AWWayofTime:blockTeleposer>;
val alchemicChemistrySet = <AWWayofTime:blockWritingTable>;
val bloodLight = <AWWayofTime:bloodLight>;
val offensa = <AWWayofTime:bloodMagicBaseAlchemyItems>;
val quartzRod = <AWWayofTime:bloodMagicBaseItems>;
val filledSocket = <AWWayofTime:bloodSocket>;
val bloodStoneBrick = <AWWayofTime:bloodStoneBrick>;
val boundAxe = <AWWayofTime:boundAxe>;
val boundBoots = <AWWayofTime:boundBoots>;
val boundHelmet = <AWWayofTime:boundHelmet>;
val boundLeggings = <AWWayofTime:boundLeggings>;
val boundPickaxe = <AWWayofTime:boundPickaxe>;
val boundPlate = <AWWayofTime:boundPlate>;
val boundShovel = <AWWayofTime:boundShovel>;
val bucketLife = <AWWayofTime:bucketLife>;
val testingOrb = <AWWayofTime:creativeFiller>;
val crepitous = <AWWayofTime:crepitous>;
val crystallos = <AWWayofTime:crystallos>;
val dynamicMace = <AWWayofTime:customTool>;
val daggerSacrifice = <AWWayofTime:daggerOfSacrifice>;
val demonBloodShard = <AWWayofTime:demonBloodShard>;
val demonPlacer = <AWWayofTime:demonPlacer>;
val demonPortalMain = <AWWayofTime:demonPortalMain>;
val demonicSlate = <AWWayofTime:demonicSlate>;
val demonicTelepositionFocus = <AWWayofTime:demonicTelepositionFocus>;
val divinationSigil = <AWWayofTime:divinationSigil>;
val duskScribeTool= <AWWayofTime:duskScribeTool>;
val earthScribeTool = <AWWayofTime:earthScribeTool>;
val efficiencyRune = <AWWayofTime:efficiencyRune>;
val emptySocket = <AWWayofTime:emptySocket>;
val energyBazooka = <AWWayofTime:energyBazooka>;
val energyBlaster = <AWWayofTime:energyBlaster>;
val boundBlade = <AWWayofTime:energySword>;
val enhancedFillingAgent = <AWWayofTime:enhancedFillingAgent>;
val enhancedTelepositionFocus = <AWWayofTime:enhancedTelepositionFocus>;
val fireScribeTool = <AWWayofTime:fireScribeTool>;
val fluidSigil = <AWWayofTime:fluidSigil>;
val greaterLengtheningCatalyst = <AWWayofTime:greaterLengtheningCatalyst>;
val greaterPowerCatalyst = <AWWayofTime:greaterPowerCatalyst>;
val growthSigil = <AWWayofTime:growthSigil>;
val imbuedSlate = <AWWayofTime:imbuedSlate>;
val imperfectRitualStone = <AWWayofTime:imperfectRitualStone>;
val incendium  = <AWWayofTime:incendium>;
val itemBloodLightSigil  = <AWWayofTime:itemBloodLightSigil>;
val itemComplexSpellCrystal = <AWWayofTime:itemComplexSpellCrystal>;
val keyBinding = <AWWayofTime:itemKeyOfDiablo>;
val itemRitualDiviner = <AWWayofTime:itemRitualDiviner>;
val largeBloodStoneBrick = <AWWayofTime:largeBloodStoneBrick>;
val lavaCrystal = <AWWayofTime:lavaCrystal>;
val lavaSigil = <AWWayofTime:lavaSigil>;
val lifeEssence = <AWWayofTime:lifeEssence>;
val magicales = <AWWayofTime:magicales>;
val magicianBloodOrb = <AWWayofTime:magicianBloodOrb>;
val masterBloodOrb = <AWWayofTime:masterBloodOrb>;
val masterRitualStone = <AWWayofTime:masterStone>;
val mundaneLengtheningCatalyst = <AWWayofTime:mundaneLengtheningCatalyst>;
val mundanePowerCatalyst = <AWWayofTime:mundanePowerCatalyst>;
val reinforcedSlate = <AWWayofTime:reinforcedSlate>;
val reinforcedTelepositionFocus = <AWWayofTime:reinforcedTelepositionFocus>;
val ritualStone = <AWWayofTime:ritualStone>;
val runeOfSacrifice = <AWWayofTime:runeOfSacrifice>;
val runeOfSelfSacrifice = <AWWayofTime:runeOfSelfSacrifice>;
val sacrificialKnife = <AWWayofTime:sacrificialKnife>;
val sanctus = <AWWayofTime:sanctus>;
val sigilSight = <AWWayofTime:seerSigil>;
val sigilOfElementalAffinity = <AWWayofTime:sigilOfElementalAffinity>;
val sigilOfEnderSeverance = <AWWayofTime:sigilOfEnderSeverance>;
val sigilOfHaste = <AWWayofTime:sigilOfHaste>;
val sigilOfHolding = <AWWayofTime:sigilOfHolding>;
val sigilOfMagnetism = <AWWayofTime:sigilOfMagnetism>;
val sigilOfSupression = <AWWayofTime:sigilOfSupression>;
val sigilOfThePhantomBridge = <AWWayofTime:sigilOfTheBridge>;
val sigilOfTheFastMiner = <AWWayofTime:sigilOfTheFastMiner>;
val sigilOfWhirlwind = <AWWayofTime:sigilOfWind>;
val simpleCatalyst = <AWWayofTime:simpleCatalyst>;
val spectralBlock = <AWWayofTime:spectralBlock>;
val spectralContainer = <AWWayofTime:spectralContainer>;
val speedRune = <AWWayofTime:speedRune>;
val standardBindingAgent = <AWWayofTime:standardBindingAgent>;
val standardFillingAgent = <AWWayofTime:standardFillingAgent>;
val telepositionFocus = <AWWayofTime:telepositionFocus>;
val tennebrae = <AWWayofTime:tennebrae>;
val terrae = <AWWayofTime:terrae>;
val voidSigil = <AWWayofTime:voidSigil>;
val waterScribeTool = <AWWayofTime:waterScribeTool>;
val waterSigil = <AWWayofTime:waterSigil>;
val weakBindingAgent = <AWWayofTime:weakBindingAgent>;
val weakBloodOrb = <AWWayofTime:weakBloodOrb>;
val weakBloodShard = <AWWayofTime:weakBloodShard>;
val weakFillingAgent = <AWWayofTime:weakFillingAgent>;
##Botania
val alchemyCatalyst = <Botania:alchemyCatalyst>;
val elvenGatewayCore = <Botania:alfheimPortal>;
val petalApothecary = <Botania:altar>;
val bandAura = <Botania:auraRing>;
val gereaterBandAura = <Botania:auraRingGreater>;
val rodBifrost = <Botania:bifrost>;
val buriedPetals = <Botania:buriedPetals>;
val conjurationCatalyst = <Botania:conjurationCatalyst>;
val hellishBrick = <Botania:customBrick>;
val hellishBrickSlab = <Botania:customBrick0Slab>;
val hellishBrickSlabFull = <Botania:customBrick0SlabFull>;
val hellishBrickStairs = <Botania:customBrick0Stairs>;
val soulBrickSlab = <Botania:customBrick1Slab>;
val soulBrickSlabFull = <Botania:customBrick1SlabFull> ;
val soulBrickStairs = <Botania:customBrick1Stairs>;
val frostyBrickSlab = <Botania:customBrick2Slab>;
val frostyBrickSlabFull = <Botania:customBrick2SlabFull>;
val frostyBrickStairs = <Botania:customBrick2Stairs>;
val roofTileSlab = <Botania:customBrick3Slab> ;
val roofTileSlabFull = <Botania:customBrick3SlabFull>;
val roofTileStairs = <Botania:customBrick3Stairs>;
val rodLands = <Botania:dirtRod>;
val manaDistributor = <Botania:distributor>;
val divaCharm = <Botania:divaCharm>;
val dreamwood = <Botania:dreamwood>;
val dreamwoodSlab = <Botania:dreamwood0Slab>;
val dreamwoodSlabFull = <Botania:dreamwood0SlabFull>;
val dreamwoodStairs = <Botania:dreamwood0Stairs>;
val dreamwoodPlankSlab = <Botania:dreamwood1Slab>;
val dreamwoodPlankSlabFull = <Botania:dreamwood1SlabFull>;
val dreamwoodPlankStairs = <Botania:dreamwood1Stairs>;
val floralPowder = <Botania:dye>;
val elementiumAxe = <Botania:elementiumAxe>;
val elementiumBoots = <Botania:elementiumBoots>;
val elementiumChestplate = <Botania:elementiumChest>;
val elementiumHelm = <Botania:elementiumHelm>;
val elementiumHelmRevealing = <Botania:elementiumHelmReveal>;
val elementiumLeggings = <Botania:elementiumLegs>;
val elementiumPick = <Botania:elementiumPick>;
val elementiumShears = <Botania:elementiumShears>;
val elementiumShovel = <Botania:elementiumShovel>;
val elementiumSword = <Botania:elementiumSword> ;
val manaEnchanter = <Botania:enchanter>;
val soulscribe = <Botania:enderDagger>;
val enderOverseer = <Botania:enderEyeBlock>;
val enderHand = <Botania:enderHand>;
val floralFertilier = <Botania:fertilizer>;
val hellRod = <Botania:fireRod>;
val flugelTiara = <Botania:flightTiara>;
val mysticalFlower = <Botania:flower>;
val drumWild = <Botania:forestDrum>;
val eyeAncients = <Botania:forestEye>;
val goldenLaurel = <Botania:goldenLaurel>;
val hornWild = <Botania:grassHorn>;
val pastureSeeds = <Botania:grassSeeds>;
val snowflakePendant = <Botania:icePendant>;
val spectator = <Botania:itemFinder>;
val tectonicGirdle = <Botania:knockbackBelt>;
val laputaShard =  <Botania:laputaShard>;
val pyroclastPendant = <Botania:lavaPendant>;
val manaLens =  <Botania:lens>;
val lexicaBotania = <Botania:lexicon>;
val livingrock = <Botania:livingrock>;
val livingrockSlab = <Botania:livingrock0Slab>;
val livingrockSlabFull = <Botania:livingrock0SlabFull>;
val livingrockStairs = <Botania:livingrock0Stairs>;
val livingrockBrickSlab = <Botania:livingrock1Slab>;
val livingrockBrickSlabFull = <Botania:livingrock1SlabFull>;
val livingrockBrickStairs = <Botania:livingrock1Stairs>;
val livingwood = <Botania:livingwood>;
val livingwoodSlab = <Botania:livingwood0Slab>;
val livingwoodSlabFull = <Botania:livingwood0SlabFull>;
val livingwoodStairs = <Botania:livingwood0Stairs>;
val livingwoodPlanksSlab = <Botania:livingwood1Slab>;
val livingwoodPlanksSlabFull = <Botania:livingwood1SlabFull>;
val livingwoodPlanksStairs = <Botania:livingwood1Stairs>;
val magnetRing = <Botania:magnetRing>;
val unstableBeacon = <Botania:manaBeacon>;
val manaBottle = <Botania:manaBottle>;
val manaCookie =  <Botania:manaCookie>;
val manaDetector = <Botania:manaDetector>;
val manaBlaster = <Botania:manaGun>;
val manaMirror = <Botania:manaMirror>;
val manaPetal = <Botania:manaPetal>;
val manasteelIngot = <Botania:manaResource>;
val manaPearl = <Botania:manaResource:1>;
val manaDiamond = <Botania:manaResource:2>;
val livingwoodTwig = <Botania:manaResource:3>;
val terrasteelIngot = <Botania:manaResource:4>;
val gaiaSpirit = <Botania:manaResource:5>;
val redstoneRoot = <Botania:manaResource:6>;
val elementiumIngot = <Botania:manaResource:7>;
val pixieDust = <Botania:manaResource:8>;
val dragonStone = <Botania:manaResource:9>;
val prismarineShard = <Botania:manaResource:10>;
val craftingPlaceholder = <Botania:manaResource:11>;
val manaRing = <Botania:manaRing>;
val greaterManaRing = <Botania:manaRingGreater>;
val manaTablet = <Botania:manaTablet>;
val manaVoid = <Botania:manaVoid>;
val manasteelAxe = <Botania:manasteelAxe>;
val manasteelBoots = <Botania:manasteelBoots>;
val manasteelChestplate = <Botania:manasteelChest>;
val manasteelHelm = <Botania:manasteelHelm>;
val manasteelHelmRevealing = <Botania:manasteelHelmReveal>;
val manasteelLeggings = <Botania:manasteelLegs>;
val manasteelPick = <Botania:manasteelPick>;
val manasteelShears = <Botania:manasteelShears>;
val manasteelShovel = <Botania:manasteelShovel>;
val manasteelSword = <Botania:manasteelSword>;
val floatingFlower = <Botania:miniIsland>;
val ringMantle = <Botania:miningRing>;
val extrapolatedBucket = <Botania:openBucket>;
val openCrate = <Botania:openCrate>;
val pestleAndMortar = <Botania:pestleAndMortar>;
val mysticalPetal = <Botania:petal>;
val forceRelay = <Botania:pistonRelay>;
val greatFairyRing = <Botania:pixieRing>;
val abstrusePlatform = <Botania:platform>;
val prismarine = <Botania:prismarine>;
val prismarineSlab = <Botania:prismarine0Slab>;
val prismarineSlabFull = <Botania:prismarine0SlabFull>;
val prismarineStairs = <Botania:prismarine0Stairs>;
val prismarineBrickSlab = <Botania:prismarine1Slab>;
val prismarineBrickSlabFull = <Botania:prismarine1SlabFull>;
val prismarineBrickStairs = <Botania:prismarine1Stairs>;
val darkPrismarineSlab = <Botania:prismarine2Slab>;
val darkPrismarineSlabFull = <Botania:prismarine2SlabFull> ;
val darkPrismarineStairs = <Botania:prismarine2Stairs>;
val manaPylon = <Botania:pylon>;
val smokyQuartz = <Botania:quartz>;
val blazeQuartzSlabFull = <Botania:quartzSlabBlazeFull>;
val blazeQuartzSlab = <Botania:quartzSlabBlazeHalf>;
val smokeyQuartzSlabFull = <Botania:quartzSlabDarkFull>;
val smokeyQuartzSlab = <Botania:quartzSlabDarkHalf>;
val elfQuartzSlabFull = <Botania:quartzSlabElfFull>;
val elfQuartzSlab = <Botania:quartzSlabElfHalf>;
val lavenderQuartzSlabFull = <Botania:quartzSlabLavenderFull>;
val lavenderQuartzSlab = <Botania:quartzSlabLavenderHalf>;
val manaQuartzSlabFull = <Botania:quartzSlabManaFull>;
val manaQuartzSlab = <Botania:quartzSlabManaHalf>;
val redQuartzSlabFull = <Botania:quartzSlabRedFull>;
val redQuartzSlab = <Botania:quartzSlabRedHalf>;
val blazeQuartzStairs = <Botania:quartzStairsBlaze>;
val smokeyQuartzStairs = <Botania:quartzStairsBlaze>;	
val elfQuartzStairs = <Botania:quartzStairsElf>;
val lavenderQuartzStairs = <Botania:quartzStairsLavender>;
val manaQuartzStairs = <Botania:quartzStairsMana>;
val redQuartzStairs = <Botania:quartzStairsRed>;
val blazeQuartzBlock = <Botania:quartzTypeBlaze>;
val smokeyQuartzBlock = <Botania:quartzTypeDark>;
val elfQuartzBlock = <Botania:quartzTypeDark>;
val lavenderQuartzBlock = <Botania:quartzTypeLavender>;
val manaQuartzBlock = <Botania:quartzTypeMana>;
val redQuartzBlock = <Botania:quartzTypeRed>;
val rainbowRod = <Botania:rainbowRod>;
val farReachRing = <Botania:reachRing>;
val reedBlock = <Botania:reedBlock>;
val reedSlab = <Botania:reedBlock0Slab>;
val reedSlabFull = <Botania:reedBlock0SlabFull>;
val reedStairs = <Botania:reedBlock0Stairs>;
val runeOfWater = <Botania:rune>;
val runeOfFire = <Botania:rune:1>;
val runeOfEarth = <Botania:rune:2>;
val runeOfAir = <Botania:rune:3>;
val runeOfSpring = <Botania:rune:4>;
val runeOfSummer = <Botania:rune:5>;
val runeOfAutumn = <Botania:rune:6>;
val runeOfWinter = <Botania:rune:7>;
val runeOfMana = <Botania:rune:8>;
val runeOfLust = <Botania:rune:9>;
val runeOfGreed = <Botania:rune:11>;
val runeOfSloth = <Botania:rune:12>;
val runeOfWrath = <Botania:rune:13>;
val runeOfEnvy = <Botania:rune:14>;
val runeOfPride = <Botania:rune:15>;
val runeOfGluttony = <Botania:rune:10>;
val runicAltar = <Botania:runeAltar>;
val seaLantern = <Botania:seaLamp>;
val glimmeringFlower = <Botania:shinyFlower>;
val signalFlare = <Botania:signalFlare>;
val rodHighlands = <Botania:skyDirtRod>;
val slingshot = <Botania:slingshot>;
val solidVine = <Botania:solidVine>;
val lifeImbuer = <Botania:spawnerClaw>;
val lifeAggregator = <Botania:spawnerMover>;
val botaniaFlower = <Botania:specialFlower>;
val manaSpreader = <Botania:spreader>;
val crimsonPendant = <Botania:superLavaPendant>;
val globetrotterSash = <Botania:superTravelBelt>;
val terraPick = <Botania:terraPick>;
val terraSword = <Botania:terraSword>;
val terrasteelBlock = <Botania:storage:1>;
val terrafirmaRod = <Botania:terraformRod>;
val terrasteelBoots = <Botania:terrasteelBoots>;
val terrasteelChestplate = <Botania:terrasteelChest>;
val terrasteelHelm = <Botania:terrasteelHelm>;
val terrasteelHelmRevealing = <Botania:terrasteelHelmReveal>;
val terrasteelLegs = <Botania:terrasteelLegs>;
val thatch = <Botania:thatch>;
val thatchSlab = <Botania:thatch0Slab>;
val thatchSlabFull = <Botania:thatch0SlabFull>;
val thatchStairs = <Botania:thatch0Stairs>;
val tinyPlanet = <Botania:tinyPlanet>;
val tinyPlanetBlock = <Botania:tinyPlanetBlock>;
val tinyPotato = <Botania:tinyPotato>;
val skiesRod = <Botania:tornadoRod>;
val soujournersSash = <Botania:travelBelt>;
val turntable = <Botania:turntable>;
val wandForest = <Botania:twigWand>;
val unstableCube = <Botania:unstableBlock>;
val vineBall = <Botania:vineBall>;
val necrodermalVirus = <Botania:virus>;
val chordataRing = <Botania:waterRing>;
val seasRod = <Botania:waterRod>;
##BTN Flora
val jadedAmaranthus = <Botania:specialFlower>.withTag({type: "jadedAmaranthus"});
val endoFlame = <Botania:specialFlower>.withTag({type: "endoflame"});
val pureDaisy = <Botania:specialFlower>.withTag({type: "puredaisy"});
val manaStar = <Botania:specialFlower>.withTag({type: "manastar"});
val dayBloom = <Botania:specialFlower>.withTag({type: "daybloom"});
val nightShade = <Botania:specialFlower>.withTag({type: "nightshade"});
val thermaLily = <Botania:specialFlower>.withTag({type: "thermalily"});
val rosaArcana = <Botania:specialFlower>.withTag({type: "arcanerose"});
val munchDew = <Botania:specialFlower>.withTag({type: "munchdew"});
val entropinnyum = <Botania:specialFlower>.withTag({type: "entropinnyum"});
val kekimurus = <Botania:specialFlower>.withTag({type: "kekimurus"});
val gourmaryllis = <Botania:specialFlower>.withTag({type: "gourmaryllis"});
val belleThorn = <Botania:specialFlower>.withTag({type: "bellethorn"});
val dreadThorn = <Botania:specialFlower>.withTag({type: "dreadthorn"});
val heiseiDream = <Botania:specialFlower>.withTag({type: "heiseiDream"});
val tigersEye = <Botania:specialFlower>.withTag({type: "tigerseye"});
val oreChid = <Botania:specialFlower>.withTag({type: "orechid"});
val exoFlame = <Botania:specialFlower>.withTag({type: "exoflame"});
val agricarnation = <Botania:specialFlower>.withTag({type: "agricarnation"});
val hopperHock = <Botania:specialFlower>.withTag({type: "hopperhock"});
val rennuncarpus = <Botania:specialFlower>.withTag({type: "rannuncarpus"});
val tangleBerrie = <Botania:specialFlower>.withTag({type: "tangleberrie"});
val jiyuulia = <Botania:specialFlower>.withTag({type: "jiyuulia"});
val hyacidus = <Botania:specialFlower>.withTag({type: "hyacidus"});
val pollidisiac = <Botania:specialFlower>.withTag({type: "pollidisiac"});
val clayConia = <Botania:specialFlower>.withTag({type: "clayconia"});
val loonium = <Botania:specialFlower>.withTag({type: "loonium"});
val daffomill = <Botania:specialFlower>.withTag({type: "daffomill"});
val vinculotus = <Botania:specialFlower>.withTag({type: "vinculotus"});
val hydroangeas = <Botania:specialFlower>.withTag({type: "hydroangeas"});
val fallenKanade = <Botania:specialFlower>.withTag({type: "fallenKanade"});
##BTN Petals
val whiteMysticalPetal = <Botania:petal>;
val orangeMysticalPetal = <Botania:petal:1>;
val magentaMysticalPetal = <Botania:petal:2>;
val lightBlueMysticalPetal = <Botania:petal:3>;
val yellowMysticalPetal = <Botania:petal:4>;
val limeMysticalPetal = <Botania:petal:5>;
val pinkMysticalPetal = <Botania:petal:6>;
val grayMysticalPetal = <Botania:petal:7>;
val lightGrayMysticalPetal = <Botania:petal:8>;
val cyanMysticalPetal = <Botania:petal:9>;
val purpleMysticalPetal = <Botania:petal:10>;
val blueMysticalPetal = <Botania:petal:11>;
val brownMysticalPetal = <Botania:petal:12>;
val greenMysticalPetal = <Botania:petal:13>;
val redMysticalPetal = <Botania:petal:14>;
val blackMysticalPetal = <Botania:petal:15>;
##BTN Mana Petals
val whiteManaPetal = <Botania:manaPetal>;
val orangeManaPetal = <Botania:manaPetal:1>;
val magentaManaPetal = <Botania:manaPetal:2>;
val lightBlueManaPetal = <Botania:manaPetal:3>;
val yellowManaPetal = <Botania:manaPetal:4>;
val limeManaPetal = <Botania:manaPetal:5>;
val pinkManaPetal = <Botania:manaPetal:6>;
val grayManaPetal = <Botania:manaPetal:7>;
val lightGrayManaPetal = <Botania:manaPetal:8>;
val cyanManaPetal = <Botania:manaPetal:9>;
val purpleManaPetal = <Botania:manaPetal:10>;
val blueManaPetal = <Botania:manaPetal:11>;
val brownManaPetal = <Botania:manaPetal:12>;
val greenManaPetal = <Botania:manaPetal:13>;
val redManaPetal = <Botania:manaPetal:14>;
val blackManaPetal = <Botania:manaPetal:15>;
##BTN Runes
val runeOfWater = <Botania:rune>;
val runeOfFire = <Botania:rune:1>;
val runeOfEarth = <Botania:rune:2>;
val runeOfAir = <Botania:rune:3>;
val runeOfSpring = <Botania:rune:4>;
val runeOfSummer = <Botania:rune:5>;
val runeOfAutumn = <Botania:rune:6>;
val runeOfWinter = <Botania:rune:7>;
val runeOfMana = <Botania:rune:8>;
val runeOfLust = <Botania:rune:9>;
val runeOfGluttony = <Botania:rune:10>;
val runeOfGreed = <Botania:rune:11>;
val runeOfSloth = <Botania:rune:12>;
val runeOfWrath = <Botania:rune:13>;
val runeOfEnvy = <Botania:rune:14>;
val runeOfPride = <Botania:rune:15>;
##Minecraft
val piston = <minecraft:piston>;
val rose = <minecraft:red_flower>;
val daisy = <minecraft:yellow_flower>;
val smoothStone = <minecraft:stone>;
val planks = <minecraft:planks:*>;
val leather = <minecraft:leather>;
val lavaBucket = <minecraft:lava_bucket>;
val magmaCream = <minecraft:magma_cream>;
##Recipes

//blood rune
recipes.remove(bloodRune);
recipes.addShaped(bloodRune, [[smoothStone, smoothStone, smoothStone], [blankSlate, pureDaisy, blankSlate], [smoothStone, smoothStone, smoothStone]]);

//living rock
recipes.addShaped(livingrock * 2, [[smoothStone, bucketLife, smoothStone], [null, null, null], [null, null, null]]);
mods.bloodmagic.Altar.addRecipe(livingrock, smoothStone, 1, 500, 20, 20);

//living wood
recipes.addShaped(livingwood * 2, [[planks, bucketLife, planks], [null, null, null], [null, null, null]]);
mods.bloodmagic.Altar.addRecipe(livingwood, planks, 1, 500, 20, 20);

//endoflame
mods.botania.Apothecary.removeRecipe(endoFlame);
mods.bloodmagic.Altar.addRecipe(endoFlame, rose, 1, 1000, 20, 20);

//jaded amaranthus
mods.botania.Apothecary.removeRecipe(jadedAmaranthus);
mods.bloodmagic.Altar.addRecipe(jadedAmaranthus, daisy, 1, 1000, 20, 20);

//mana spreader
recipes.remove(manaSpreader);
mods.bloodmagic.Altar.addRecipe(manaSpreader, piston, 1, 1500, 20, 20);

//globetrotter sash
recipes.remove(globetrotterSash);
recipes.addShaped(globetrotterSash, [[elementiumIngot, null, boundBoots], [null, soujournersSash, null], [gaiaSpirit, null, elementiumIngot]]);

//soujourners sash
recipes.remove(soujournersSash);
recipes.addShaped(soujournersSash, [[runeOfEarth, leather, airSigil], [leather, sigilOfHaste, leather], [manasteelIngot, leather, runeOfAir]]);

//empty socket
recipes.remove(emptySocket);
mods.botania.ManaInfusion.addInfusion(emptySocket, terrasteelBlock, 99999);

//lava sigil
recipes.remove(lavaSigil);
recipes.addShaped(lavaSigil, [[lavaBucket, magmaCream, lavaBucket], [thermaLily, blankSlate, thermaLily], [lavaBucket, lavaCrystal, lavaBucket]]);

//Keep this at the bottom
print("BM-BTN Script Loaded");
